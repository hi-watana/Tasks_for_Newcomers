#!/usr/bin/env swipl
/* vim:set filetype=prolog: */

:- initialization(main,main).
%:- use_module(library(clpfd)).

main(Args) :-
    length(Args,N),
    args_check(N),
    Args = [File,Chain|_],
    read_file_to_string(File,S,[]),
    split_string(S,"\n","",Ls),
    include(ca_line(Chain),Ls,Lines),
    maplist(line_to_point,Lines,Points),
    gravity(Points,G),
    maplist(maplist(minus,G),Points,RelativePoints),
    maplist(norm,RelativePoints,Norms),
    means(Norms,R),
    write(R),nl.

args_check(2).
args_check(_) :-
    write("Usage: ./ex07.swi <PDB file> <chain name>"),
    nl,
    halt(1).

ca_line(C,S) :-
    atom_line(S),
    sub_string(S,13,2,_,"CA"),
    sub_string(S,15,1,_,C15),
    a_or_blank(C15),
    sub_string(S,21,1,_,C).

a_or_blank(" ").
a_or_blank("A").

atom_line(S) :-
    sub_string(S,0,4,_,"ATOM");
    sub_string(S,0,6,_,"HETATM").

line_to_point(Line,Point) :-
    maplist(seven_chars(Line),[30,38,46],Strings),
    maplist(trim,Strings,Trimed),
    maplist(atom_string,Atoms,Trimed),
    maplist(atom_number,Atoms,Point).

seven_chars(String,Begin,Seven) :-
    sub_string(String,Begin,7,_,Seven).

trim(B,A) :-
    split_string(B,"","\s\t\n",Ls),
    Ls = [A|_].

means(Ls,Ave) :-
    sum_list(Ls,Sum),
    length(Ls,Length),
    Ave is Sum / Length.

minus(X,Y,Z) :-
    Z is X - Y.

norm(Point,Norm) :-
    Point = [X,Y,Z],
    Norm2 is X * X + Y * Y + Z * Z,
    Norm is sqrt(Norm2).

/*
gravity(Points,G) :-
    transpose(Points,PointsT),
    maplist(means,PointsT,G).
*/

gravity(Points,G) :-
    length(Points,N),
    gravity(Points,[0,0,0],N,G).

gravity([],Sum,N,G) :-
    Sum = [X,Y,Z],
    Xg is X / N,
    Yg is Y / N,
    Zg is Z / N,
    G = [Xg,Yg,Zg].

gravity([P|Rem],Sum,N,G) :-
    maplist(my_plus,P,Sum,Sum1),
    gravity(Rem,Sum1,N,G).

my_plus(X,Y,Z) :-
    Z is X + Y.
